name: Build Windows Release (Performance Optimized)

# 触发条件
on:
  # 手动触发
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., 0.6.599)'
        required: true
        default: '0.6.599'
  
  # 工作流调用（供其他工作流使用）
  workflow_call:
    inputs:
      version:
        description: 'Version to build'
        required: true
        type: string
  
  # 推送到main分支或创建标签时触发
  push:
    branches:
      - main
    tags:
      - 'v*'
    paths:
      - 'src-tauri/**'
      - 'web-app/**'
      - 'core/**'
      - '.github/workflows/build-windows.yml'

# 全局环境变量
env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  # 启用 sccache
  SCCACHE_GHA_ENABLED: "true"
  RUSTC_WRAPPER: "sccache"
  # Cargo 优化
  CARGO_NET_RETRY: 3
  CARGO_HTTP_TIMEOUT: 300
  CARGO_HTTP_MULTIPLEXING: true
  # 并行构建 - 不设置 CARGO_BUILD_JOBS，让 Cargo 自动决定
  # CARGO_BUILD_JOBS 被移除，因为设置为 0 会导致错误
  MAKEFLAGS: "-j4"

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
      # 1. 检出代码
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # 2. 设置 Node.js (使用.nvmrc指定的版本)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          # 不使用 yarn 缓存，因为需要先启用 Corepack

      # 2.5 启用 Corepack 和 Yarn (锁定版本)
      - name: Enable Corepack
        run: |
          corepack enable
          corepack prepare yarn@4.5.3 --activate
          yarn --version

      # 2.6 安装 Windows 构建工具
      - name: Install Windows build tools
        run: |
          # 安装 jq（用于处理 JSON）
          choco install jq -y
          
          # 验证工具安装
          jq --version

      # 3. 设置 Rust (使用rust-toolchain.toml指定的版本)
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.77.2
          targets: x86_64-pc-windows-msvc
          components: rustfmt, clippy

      # 3.1 安装 sccache（Rust 编译缓存）
      - name: Install sccache
        uses: mozilla-actions/sccache-action@v0.0.8
        with:
          version: "v0.9.0"

      # 3.5 安装 Rust 构建工具（可选，如果需要 ctoml）
      # 注意：ctoml 可能不是必需的，暂时跳过以避免 sccache 冲突
      # - name: Install Rust build tools  
      #   run: |
      #     cargo install ctoml --version 0.1.0
      #   shell: powershell

      # 3.6 安装 .NET 构建工具
      - name: Install .NET build tools
        run: |
          # 检查缓存是否存在 AzureSignTool，不存在则安装  
          if (!(Get-Command AzureSignTool -ErrorAction SilentlyContinue)) {
            dotnet tool install --global AzureSignTool --version 4.0.1
          } else {
            Write-Output "AzureSignTool already installed"
          }
          
          # 验证安装
          try {
            AzureSignTool --help | Out-Null
            Write-Output "AzureSignTool verified"
          } catch {
            Write-Output "AzureSignTool installation failed"
          }
        shell: powershell
        continue-on-error: true

      # 4. 增强的缓存策略
      # 4.1 Rust 缓存（增强版）
      - name: Rust cache (Enhanced)
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
          cache-on-failure: true
          cache-all-crates: true
          # 缓存密钥包含更多信息
          key: v2-${{ runner.os }}-rust-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml') }}
          # 启用共享缓存
          shared-key: v2-${{ runner.os }}-rust-shared
          # 缓存环境变量
          env-vars: CARGO_BUILD_JOBS RUSTC_WRAPPER
          
      # 4.2 增强的 Yarn 缓存
      - name: Enhanced Yarn cache
        uses: actions/cache@v4
        id: yarn-cache
        with:
          path: |
            .yarn/cache
            .yarn/install-state.gz
            node_modules
            */node_modules
            ~/.cache/yarn
          key: v2-${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock', '**/package.json') }}
          restore-keys: |
            v2-${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
            v2-${{ runner.os }}-yarn-

      # 4.3 构建工具缓存
      - name: Cache build tools
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/sccache*
            ~/.dotnet/tools
            ~/.local/share/applications
          key: v2-${{ runner.os }}-build-tools-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            v2-${{ runner.os }}-build-tools-

      # 4.4 前端构建缓存
      - name: Cache Vite build
        uses: actions/cache@v4
        with:
          path: |
            web-app/node_modules/.vite
            web-app/dist
            core/dist
            extensions-web/dist
          key: v2-${{ runner.os }}-vite-${{ hashFiles('**/package.json', '**/vite.config.*') }}
          restore-keys: |
            v2-${{ runner.os }}-vite-

      # 5. 并行依赖安装
      - name: Install dependencies (Parallel)
        run: |
          # 设置 Yarn 并行安装
          yarn config set networkConcurrency 16
          yarn config set httpTimeout 600000
          
          # 安装依赖
          yarn install --immutable --inline-builds
        env:
          YARN_HTTP_TIMEOUT: 600000
          YARN_NETWORK_CONCURRENCY: 16

      # 6. 获取版本号
      - name: Get version
        id: get_version
        shell: bash
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          elif [ "${{ github.event_name }}" == "workflow_call" ]; then
            VERSION="${{ inputs.version }}"
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=$(node -p "require('./web-app/package.json').version")
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      # 7. 更新版本号和配置NSIS模板
      - name: Update version and configure NSIS template
        shell: bash
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          
          # 使用 jq 更新 package.json（更可靠）
          cd web-app
          jq --arg version "$VERSION" '.version = $version' package.json > package.json.tmp && mv package.json.tmp package.json
          cd ..
          
          # 更新 tauri.conf.json
          jq --arg version "$VERSION" '.version = $version' src-tauri/tauri.conf.json > src-tauri/tauri.conf.json.tmp && mv src-tauri/tauri.conf.json.tmp src-tauri/tauri.conf.json
          jq '.bundle.windows.nsis.template = "tauri.bundle.windows.nsis.template"' src-tauri/tauri.conf.json > src-tauri/tauri.conf.json.tmp && mv src-tauri/tauri.conf.json.tmp src-tauri/tauri.conf.json
          
          # 更新 Cargo.toml（只更新 package 部分的版本）
          sed -i "0,/^version = \".*\"/s/^version = \".*\"/version = \"$VERSION\"/" src-tauri/Cargo.toml
          
          # 处理NSIS模板中的占位符替换
          WORKSPACE_DIR=$(pwd | sed 's/\\/\\\\/g')
          
          # 生成构建版本号（如 0.6.599.0）
          BUILD_VERSION="${VERSION}.0"
          
          # 替换NSIS模板中的占位符（确保替换所有 jan_ 相关的占位符）
          sed -i "s/jan_productname/Miaoda/g" src-tauri/tauri.bundle.windows.nsis.template
          sed -i "s/jan_mainbinaryname/miaoda/g" src-tauri/tauri.bundle.windows.nsis.template
          sed -i "s/jan_version/$VERSION/g" src-tauri/tauri.bundle.windows.nsis.template
          sed -i "s/jan_build/$BUILD_VERSION/g" src-tauri/tauri.bundle.windows.nsis.template
          
          # 替换路径环境变量占位符（使用Windows格式的路径）
          # 获取当前工作目录并转换为Windows路径格式
          CURRENT_DIR=$(pwd | sed 's#/#\\#g')
          
          sed -i "s|\${INSTALLERICON}|${CURRENT_DIR}\\src-tauri\\icons\\icon.ico|g" src-tauri/tauri.bundle.windows.nsis.template
          sed -i "s|\${MAINBINARYSRCPATH}|${CURRENT_DIR}\\src-tauri\\target\\release\\miaoda.exe|g" src-tauri/tauri.bundle.windows.nsis.template
          sed -i "s|\${ADDITIONALPLUGINSPATH}|${CURRENT_DIR}\\src-tauri\\target\\release\\nsis\\x64\\Plugins\\x86-unicode\\additional|g" src-tauri/tauri.bundle.windows.nsis.template
          sed -i "s|\${NSISENGLISHPATH}|${CURRENT_DIR}\\src-tauri\\target\\release\\nsis\\x64\\English.nsh|g" src-tauri/tauri.bundle.windows.nsis.template
          sed -i "s|\${VULKANLIBPATH}|${CURRENT_DIR}\\src-tauri\\resources\\lib\\vulkan-1.dll|g" src-tauri/tauri.bundle.windows.nsis.template
          sed -i "s|\${LICENSEPATH}|${CURRENT_DIR}\\src-tauri\\resources\\LICENSE|g" src-tauri/tauri.bundle.windows.nsis.template
          sed -i "s|\${PREINSTALLPATH}|${CURRENT_DIR}\\src-tauri\\resources\\pre-install\\|g" src-tauri/tauri.bundle.windows.nsis.template
          sed -i "s|\${BUNEXEPATH}|${CURRENT_DIR}\\src-tauri\\resources\\bin\\bun-x86_64-pc-windows-msvc.exe|g" src-tauri/tauri.bundle.windows.nsis.template
          sed -i "s|\${UVEXEPATH}|${CURRENT_DIR}\\src-tauri\\resources\\bin\\uv-x86_64-pc-windows-msvc.exe|g" src-tauri/tauri.bundle.windows.nsis.template
          
          echo "Updated version to $VERSION and configured NSIS template"

      # 8. 并行构建应用（性能优化的核心）
      - name: Parallel build (Performance Optimized)
        run: |
          # Enable build time statistics
          $start_time = Get-Date
          
          # Set environment variables for build optimization
          # CARGO_BUILD_JOBS removed - let Cargo decide automatically
          $env:CARGO_TARGET_DIR = "./src-tauri/target"
          
          # 并行执行前端构建
          Write-Output "=== Starting Parallel Build ==="
          
          # Stage 1: Core modules and extensions build (parallel)
          Write-Output "Stage 1: Building core modules and extensions..."
          Start-Process powershell -ArgumentList "-Command", "yarn build:core; Write-Output 'Core build completed'" -NoNewWindow -PassThru | Out-Null
          Start-Process powershell -ArgumentList "-Command", "yarn build:extensions-web; Write-Output 'Extensions-web build completed'" -NoNewWindow -PassThru | Out-Null
          
          # Wait for core build to complete
          do {
            Start-Sleep -Seconds 2
            Write-Output "Waiting for core modules build to complete..."
          } while (-not (Test-Path "core/dist" -PathType Container) -or -not (Test-Path "extensions-web/dist" -PathType Container))
          
          Write-Output "Stage 1 complete: Core modules and extensions built"
          
          # Stage 2: Web application build
          Write-Output "Stage 2: Building Web application..."
          yarn build:web
          Write-Output "Stage 2 complete: Web application built"
          
          # Stage 3: Tauri build (with optimization)
          Write-Output "Stage 3: Building Tauri application..."
          # Set Rust compilation optimizations
          $env:RUSTFLAGS = "-C target-cpu=native -C opt-level=3"
          yarn build:tauri:win32
          Write-Output "Stage 3 complete: Tauri application built"
          
          # Calculate build time
          $end_time = Get-Date
          $build_duration = $end_time - $start_time
          Write-Output "=== Build Complete ==="
          Write-Output "Total build time: $($build_duration.TotalMinutes.ToString('F2')) minutes"
          
          # Display cache statistics
          if (Get-Command sccache -ErrorAction SilentlyContinue) {
            Write-Output "=== sccache Statistics ==="
            sccache --show-stats
          }
        shell: powershell
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}

      # 9. 准备发布文件
      - name: Prepare release files
        shell: bash
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          mkdir -p release
          
          # 复制安装文件
          cp src-tauri/target/release/bundle/nsis/*.exe release/
          cp src-tauri/target/release/bundle/nsis/*.exe.sig release/ 2>/dev/null || true
          
          # 重命名文件
          cd release
          for file in *.exe; do
            if [ -f "$file" ]; then
              mv "$file" "Miaoda_${VERSION}_x64-setup.exe"
            fi
          done
          for file in *.exe.sig; do
            if [ -f "$file" ]; then
              mv "$file" "Miaoda_${VERSION}_x64-setup.exe.sig"
            fi
          done
          
          ls -la
          cd ..

      # 10. 上传构建产物
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: miaoda-windows-${{ steps.get_version.outputs.VERSION }}
          path: release/*
          retention-days: 7

      # 11. 创建 Release（仅在标签触发时）
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: release/*
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            ## Miaoda ${{ steps.get_version.outputs.VERSION }}
            
            ### Windows 安装包
            - `Miaoda_${{ steps.get_version.outputs.VERSION }}_x64-setup.exe` - Windows 64位安装程序
            
            ### 构建性能优化
            - ✅ Rust 编译缓存 (sccache)
            - ✅ 并行构建流水线
            - ✅ 增强的依赖缓存策略
            - ✅ 前端构建优化
            
            ### 更新内容
            - 修复底部图标透明度问题
            - 修复左边栏隐藏时的交互冲突
            - 优化智能上下文管理系统
            
            ### 安装说明
            1. 下载 `Miaoda_${{ steps.get_version.outputs.VERSION }}_x64-setup.exe`
            2. 双击运行安装程序
            3. 按照安装向导完成安装

      # 12. 构建报告和统计
      - name: Build Performance Report
        if: always()
        run: |
          Write-Output "=== Build Performance Report ==="
          Write-Output "Build completed!"
          
          # Display file sizes
          if (Test-Path "release") {
            Write-Output "`n=== Output File Sizes ==="
            Get-ChildItem -Path "release" -File | ForEach-Object {
              $size = [math]::Round($_.Length / 1MB, 2)
              Write-Output "$($_.Name): $size MB"
            }
          }
          
          # Display final sccache statistics
          if (Get-Command sccache -ErrorAction SilentlyContinue) {
            Write-Output "`n=== Final Cache Statistics ==="
            sccache --show-stats
          }
          
          Write-Output "`n=== Download Links ==="
          Write-Output "Artifacts: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        shell: powershell
