name: Build Windows Release

# 触发条件
on:
  # 手动触发
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., 0.6.599)'
        required: true
        default: '0.6.599'
  
  # 推送到main分支或创建标签时触发
  push:
    branches:
      - main
    tags:
      - 'v*'
    paths:
      - 'src-tauri/**'
      - 'web-app/**'
      - 'core/**'
      - '.github/workflows/build-windows.yml'

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
      # 1. 检出代码
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # 2. 设置 Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # 2.5 启用 Corepack 和 Yarn
      - name: Enable Corepack
        run: |
          corepack enable
          corepack prepare yarn@stable --activate

      # 2.6 安装 jq（用于处理 JSON）
      - name: Install jq
        run: |
          choco install jq -y

      # 3. 设置 Rust
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc

      # 4. 安装 Rust 缓存
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      # 5. 安装前端依赖
      - name: Install frontend dependencies
        run: |
          yarn install --network-timeout 600000

      # 6. 获取版本号
      - name: Get version
        id: get_version
        shell: bash
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=$(node -p "require('./web-app/package.json').version")
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      # 7. 更新版本号
      - name: Update version
        shell: bash
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          
          # 使用 jq 更新 package.json（更可靠）
          cd web-app
          jq --arg version "$VERSION" '.version = $version' package.json > package.json.tmp && mv package.json.tmp package.json
          cd ..
          
          # 更新 tauri.conf.json
          jq --arg version "$VERSION" '.version = $version' src-tauri/tauri.conf.json > src-tauri/tauri.conf.json.tmp && mv src-tauri/tauri.conf.json.tmp src-tauri/tauri.conf.json
          
          # 更新 Cargo.toml（只更新 package 部分的版本）
          sed -i "0,/^version = \".*\"/s/^version = \".*\"/version = \"$VERSION\"/" src-tauri/Cargo.toml
          
          echo "Updated version to $VERSION"

      # 8. 构建依赖模块
      - name: Build dependency modules
        run: |
          yarn build:core
          yarn build:extensions-web
          
      # 9. 构建 Tauri 应用
      - name: Build Tauri app
        run: |
          yarn build:tauri
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}

      # 10. 准备发布文件
      - name: Prepare release files
        shell: bash
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          mkdir -p release
          
          # 复制安装文件
          cp src-tauri/target/release/bundle/nsis/*.exe release/
          cp src-tauri/target/release/bundle/nsis/*.exe.sig release/ 2>/dev/null || true
          
          # 重命名文件
          cd release
          for file in *.exe; do
            if [ -f "$file" ]; then
              mv "$file" "Miaoda_${VERSION}_x64-setup.exe"
            fi
          done
          for file in *.exe.sig; do
            if [ -f "$file" ]; then
              mv "$file" "Miaoda_${VERSION}_x64-setup.exe.sig"
            fi
          done
          
          ls -la
          cd ..

      # 11. 上传构建产物
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: miaoda-windows-${{ steps.get_version.outputs.VERSION }}
          path: release/*
          retention-days: 7

      # 12. 创建 Release（仅在标签触发时）
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: release/*
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            ## Miaoda ${{ steps.get_version.outputs.VERSION }}
            
            ### Windows 安装包
            - `Miaoda_${{ steps.get_version.outputs.VERSION }}_x64-setup.exe` - Windows 64位安装程序
            
            ### 更新内容
            - 修复底部图标透明度问题
            - 修复左边栏隐藏时的交互冲突
            - 优化智能上下文管理系统
            
            ### 安装说明
            1. 下载 `Miaoda_${{ steps.get_version.outputs.VERSION }}_x64-setup.exe`
            2. 双击运行安装程序
            3. 按照安装向导完成安装

      # 13. 输出下载链接
      - name: Output download URL
        if: always()
        run: |
          echo "Build completed successfully!"
          echo "Artifacts can be downloaded from the Actions tab"
          echo "Direct link: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"