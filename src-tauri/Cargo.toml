[package]
name = "Miaoda"
version = "3.0.1"
description = "Use offline LLMs with your own data. Run open source models like Llama2 or Falcon on your internal computers/servers with Miaoda."
authors = ["miaoda <service@miaoda.xin>"]
license = "MIT"
repository = "https://github.com/miounet11/miaoda"
edition = "2021"
rust-version = "1.77.2"
resolver = "2"

[[bin]]
name = "miaoda"
path = "src/main.rs"

[lib]
name = "app_lib"
crate-type = ["staticlib", "cdylib", "rlib"]

[features]
default = [
    "tauri/wry",
    "tauri/common-controls-v6",
    "tauri/x11",
    "tauri/protocol-asset",
    "tauri/macos-private-api",
    "tauri/test",
]
test-tauri = [
    "tauri/wry",
    "tauri/x11",
    "tauri/protocol-asset",
    "tauri/macos-private-api",
    "tauri/test",
]

[build-dependencies]
tauri-build = { version = "2.0.2", features = [] }

[dependencies]
dirs = "6.0.0"
env = "1.0.1"
fix-path-env = { git = "https://github.com/tauri-apps/fix-path-env-rs" }
flate2 = "1.0"
futures-util = "0.3.31"
hyper = { version = "0.14", features = ["server"] }
jan-utils = { path = "./utils" }
libloading = "0.8.7"
log = "0.4"
reqwest = { version = "0.11", features = ["json", "blocking", "stream"] }
rmcp = { version = "0.6.0", features = [
    "client",
    "transport-sse-client",
    "transport-streamable-http-client",
    "transport-child-process",
    "tower",
    "reqwest",
] }
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
serde_yaml = "0.9.34"
tar = "0.4"
tauri-plugin-deep-link = "2"
tauri-plugin-dialog = "2.2.1"
tauri-plugin-hardware = { path = "./plugins/tauri-plugin-hardware" }
tauri-plugin-http = { version = "2", features = ["unsafe-headers"] }
tauri-plugin-llamacpp = { path = "./plugins/tauri-plugin-llamacpp" }
tauri-plugin-log = "2.0.0-rc"
tauri-plugin-opener = "2.2.7"
tauri-plugin-os = "2.2.1"
tauri-plugin-shell = "2.2.0"
tauri-plugin-store = "2"
thiserror = "2.0.12"
tokio = { version = "1", features = ["full"] }
tokio-util = "0.7.14"
url = "2.5"
uuid = { version = "1.7", features = ["v4"] }

[dependencies.tauri]
version = "2.5.0"
default-features = false
features = ["protocol-asset", "macos-private-api", "test"]

[target.'cfg(windows)'.dev-dependencies]
tempfile = "3.20.0"

[target.'cfg(unix)'.dependencies]
nix = "=0.30.1"

[target.'cfg(windows)'.dependencies]
libc = "0.2.172"
windows-sys = { version = "0.60.2", features = ["Win32_Storage_FileSystem"] }

[target.'cfg(not(any(target_os = "android", target_os = "ios")))'.dependencies]
tauri-plugin-updater = "2"
once_cell = "1.18"
tauri-plugin-single-instance = { version = "2.0.0", features = ["deep-link"] }

# ============================================================================
# 构建性能优化配置
# ============================================================================

[profile.dev]
# 开发模式优化：快速编译，保持调试信息
opt-level = 0           # 无优化，最快编译
debug = true            # 保持完整调试信息
debug-assertions = true # 保持运行时检查
overflow-checks = true  # 保持溢出检查
lto = false            # 不启用链接时优化
codegen-units = 256    # 最大并行编译单元
rpath = false
split-debuginfo = "unpacked" # Windows 上分离调试信息

[profile.release]
# 发布模式优化：平衡编译时间和运行性能
opt-level = 3          # 最高优化级别
debug = false          # 移除调试信息以减小体积
debug-assertions = false
overflow-checks = false
lto = "thin"           # 启用轻量级链接时优化
codegen-units = 1      # 单个代码生成单元以获得最佳优化
panic = "abort"        # 异常时直接终止，减小体积
strip = true           # 去除符号表

[profile.release-lto]
# 极限优化模式：最小体积和最高性能（构建时间较长）
inherits = "release"
lto = "fat"            # 完整链接时优化
codegen-units = 1      # 单个代码生成单元

# 依赖项编译优化
[profile.dev.package."*"]
opt-level = 1          # 依赖项使用基本优化

[profile.release.package."*"]
opt-level = 3          # 依赖项使用最高优化

# 特定依赖项优化
[profile.dev.package.syn]
opt-level = 2          # syn 是编译时依赖，提高优化级别

[profile.dev.package.serde]
opt-level = 2

[profile.dev.package.serde_json]
opt-level = 2

[profile.dev.package.tokio]
opt-level = 2

