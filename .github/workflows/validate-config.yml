name: 验证配置

on:
  push:
    branches: [ main, dev ]
    paths:
      - '.env.*'
      - 'scripts/config-manager.mjs'
      - 'scripts/validate-config.mjs'
      - 'core/src/types/config.ts'
      - 'core/src/config/**'
      - 'package.json'
      - '.github/workflows/validate-config.yml'
  pull_request:
    branches: [ main ]
    paths:
      - '.env.*'
      - 'scripts/config-manager.mjs'
      - 'scripts/validate-config.mjs'
      - 'core/src/types/config.ts'
      - 'core/src/config/**'
      - 'package.json'

jobs:
  validate-config:
    name: 配置验证
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        environment: [development, test, production]
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: 安装依赖
        run: yarn install --frozen-lockfile

      - name: 验证配置文件存在性
        run: yarn config:validate:files

      - name: 验证 ${{ matrix.environment }} 环境配置
        run: node ./scripts/config-manager.mjs validate ${{ matrix.environment }}
        env:
          NODE_ENV: ${{ matrix.environment }}
          # 为生产环境提供模拟的敏感配置，避免验证失败
          POSTHOG_KEY: ${{ matrix.environment == 'production' && 'mock-key' || '' }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ matrix.environment == 'production' && 'mock-key' || '' }}

      - name: 导出配置 (${{ matrix.environment }})
        run: node ./scripts/config-manager.mjs export ${{ matrix.environment }} config-${{ matrix.environment }}.json

      - name: 上传配置报告
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: config-report-${{ matrix.environment }}
          path: config-${{ matrix.environment }}.json
          retention-days: 7

  validate-gitignore:
    name: 验证 Gitignore 保护
    runs-on: ubuntu-latest
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: 安装依赖
        run: yarn install --frozen-lockfile

      - name: 验证 .gitignore 保护
        run: node ./scripts/validate-config.mjs gitignore

      - name: 检查敏感文件是否被意外提交
        run: |
          if git ls-files | grep -E '\.(env\.local|env\..*\.local)$'; then
            echo "❌ 发现被意外提交的敏感配置文件!"
            exit 1
          fi
          echo "✅ 没有发现被意外提交的敏感配置文件"

  generate-report:
    name: 生成配置报告
    runs-on: ubuntu-latest
    needs: [validate-config, validate-gitignore]
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: 安装依赖
        run: yarn install --frozen-lockfile

      - name: 生成完整配置报告
        run: yarn config:report
        env:
          # 为报告生成提供模拟配置
          POSTHOG_KEY: mock-posthog-key
          OPENAI_API_KEY: mock-openai-key
          GROK_API_KEY: mock-grok-key
          TAURI_SIGNING_PRIVATE_KEY: mock-signing-key

      - name: 上传完整配置报告
        uses: actions/upload-artifact@v4
        with:
          name: complete-config-report
          path: config-report.json
          retention-days: 30

      - name: 显示配置报告摘要
        run: |
          if [ -f "config-report.json" ]; then
            echo "📊 配置报告摘要:"
            echo "─────────────────"
            node -pe "
              const report = JSON.parse(require('fs').readFileSync('config-report.json', 'utf8'));
              console.log(\`✅ 有效环境: \${report.summary.valid}/\${report.summary.total}\`);
              console.log(\`⚠️  警告数量: \${report.summary.warnings}\`);
              console.log(\`❌ 错误数量: \${report.summary.errors}\`);
              console.log(\`📅 生成时间: \${new Date(report.timestamp).toLocaleString()}\`);
            "
          fi

  security-scan:
    name: 安全扫描
    runs-on: ubuntu-latest
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 扫描硬编码密钥
        run: |
          echo "🔍 扫描硬编码密钥..."
          
          # 检查常见的密钥模式
          patterns=(
            "api[_-]?key[s]?\s*[:=]\s*['\"][^'\"]{8,}"
            "secret[_-]?key[s]?\s*[:=]\s*['\"][^'\"]{8,}"
            "password[s]?\s*[:=]\s*['\"][^'\"]{8,}"
            "token[s]?\s*[:=]\s*['\"][^'\"]{8,}"
            "private[_-]?key\s*[:=]\s*['\"][^'\"]{8,}"
          )
          
          found_issues=false
          
          for pattern in "${patterns[@]}"; do
            if grep -r -i -E "$pattern" --include="*.ts" --include="*.js" --include="*.tsx" --include="*.jsx" --exclude-dir=node_modules --exclude-dir=dist . ; then
              echo "❌ 发现可能的硬编码密钥: $pattern"
              found_issues=true
            fi
          done
          
          if [ "$found_issues" = true ]; then
            echo "❌ 安全扫描失败: 发现硬编码密钥"
            echo "💡 提示: 请使用环境变量或配置文件来存储敏感信息"
            exit 1
          else
            echo "✅ 安全扫描通过: 未发现硬编码密钥"
          fi

      - name: 检查配置模板完整性
        run: |
          echo "🔍 检查配置模板完整性..."
          
          # 确保 .env.example 包含所有必要的配置项
          required_keys=(
            "APP_NAME"
            "APP_VERSION"
            "NODE_ENV"
            "POSTHOG_KEY"
            "MODEL_CATALOG_URL"
            "AUTO_UPDATER_DISABLED"
          )
          
          missing_keys=()
          
          for key in "${required_keys[@]}"; do
            if ! grep -q "^$key=" .env.example 2>/dev/null; then
              missing_keys+=("$key")
            fi
          done
          
          if [ ${#missing_keys[@]} -gt 0 ]; then
            echo "❌ .env.example 缺少必要的配置项:"
            printf '%s\n' "${missing_keys[@]}"
            exit 1
          else
            echo "✅ .env.example 配置模板完整"
          fi